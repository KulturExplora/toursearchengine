openapi: 3.0.3
info:
  title: Admin API
  version: 1.0.0
  description: Admin-only endpoints for user management
  x-logo:
    url: https://your-api-domain.com/logo.png
    altText: Admin API Logo

servers:
  - url: https://your-api-domain.com

# Redoc configuration
x-redoc-config:
  openapi:
    disableSearch: true
    expandResponses: 200,202
    jsonSamplesExpandLevel: 1
  theme:
    sidebar:
      backgroundColor: '#eae0cc'
      textColor: '#3d005b'
    colors:
      primary:
        main: '#660099'
    typography:
      fontSize: 14pt
      headings:
        fontWeight: bold

tags:
  - name: Admin
    description: Admin endpoints

paths:
  /admin/create-user:
    post:
      tags: [Admin]
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse_PublicUser'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/user/{id}:
    get:
      tags: [Admin]
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse_PublicUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

    delete:
      tags: [Admin]
      summary: Delete a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse_Null'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

  /admin/users:
    get:
      tags: [Admin]
      summary: Get all users (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: cursor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceResponse_PublicUserArray'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CreateUserRequest:
      type: object
      required: [name, email, role]
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [USER, ADMIN]

    PublicUser:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email

    ServiceResponse_PublicUser:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          $ref: '#/components/schemas/PublicUser'

    ServiceResponse_PublicUserArray:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/PublicUser'
            nextCursor:
              type: string
              nullable: true

    ServiceError:
      type: object
      properties:
        success:
          type: boolean
          enum: [false]
        error:
          type: string

    ServiceResponse_Null:
      type: object
      properties:
        success:
          type: boolean
          enum: [true]
        data:
          type: 'null'

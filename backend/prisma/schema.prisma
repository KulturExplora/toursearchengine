generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model TourPark {
  tourId Int
  parkId Int

  tour   Tour @relation(fields: [tourId], references: [id])
  park   Park @relation(fields: [parkId], references: [id])

  @@id([tourId, parkId])
  @@map("_TourParks")
}

model BetaSubscribers {
  id    String @id @default(uuid())
  email String @unique

  @@map("beta_subscribers")
}

model Country {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tours        Tour[]

  @@map("countries")
}

model Operator {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tours        Tour[]

  @@map("operators")
}

model Park {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  type         String
  country      String
  countryCode  String
  keyword      String
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt

  tourParks TourPark[]

  @@map("parks")
}

model TourImage {
  id           Int       @id @default(autoincrement())
  imageUrls    String
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tourId       Int
  tourUniqueId String
  tour         Tour      @relation(fields: [tourId, tourUniqueId], references: [id, uniqueId], onDelete: Cascade)

  @@index([tourId, tourUniqueId])
  @@map("tour_images")
}

model TourPrice {
  id             Int       @id @default(autoincrement())
  numOfPeople    Int       @default(0)
  currency       String
  pricePerPerson Float     @default(0)
  seasonName     String?
  seasonPeriod   String?
  dateCreated    DateTime  @default(now())
  dateModified   DateTime? @updatedAt
  tourId         Int
  tourUniqueId   String
  tour           Tour      @relation(fields: [tourId, tourUniqueId], references: [id, uniqueId], onDelete: Cascade)

  @@index([tourId, tourUniqueId])
  @@map("tour_prices")
}

model Tour {
  id                Int         @id @default(autoincrement())
  uniqueId          String      @unique
  title             String
  description       String?
  location          String?
  countryId         Int?
  country           Country?    @relation(fields: [countryId], references: [id])
  durationInDays    Int         @default(0)
  itinerary         String?
  accommodationType String?
  siteURL           String?
  included          String?
  excluded          String?
  dateCreated       DateTime    @default(now())
  dateModified      DateTime?   @updatedAt
  archived          Boolean     @default(false)
  images            TourImage[]
  prices            TourPrice[]
  operatorId        Int?
  operator          Operator?   @relation(fields: [operatorId], references: [id], onDelete: SetNull)

  tourParks         TourPark[]
  @@unique([id, uniqueId])
  @@map("tours")
}

model User {
  id    String @id @default(dbgenerated("gen_random_uuid()"))
  name  String
  email String @unique
  role  String @default("USER")

  @@map("users")
}

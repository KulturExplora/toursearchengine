generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id    String @id @default(dbgenerated("gen_random_uuid()"))
  name  String
  email String @unique
  role  String @default("USER")

  @@map("users")
}

model BetaSubscribers {
  id    String @id @default(uuid())
  email String @unique

  @@map("beta_subscribers")
}

model Tour {
  id                Int         @id @default(autoincrement())
  uniqueId          String      @unique
  title             String
  description       String?
  location          String?
  countryId         Int?
  durationInDays    Int         @default(0)
  itinerary         String?
  accommodationType String?
  siteURL           String?
  included          String?
  excluded          String?
  dateCreated       DateTime    @default(now())
  dateModified      DateTime?   @updatedAt
  archived          Boolean     @default(false)
  operatorId        Int?
  tourParks         TourPark[]
  images            TourImage[]
  prices            TourPrice[]
  country           Country?    @relation(fields: [countryId], references: [id])
  operator          Operator?   @relation(fields: [operatorId], references: [id])

  @@unique([id, uniqueId])
  @@map("tours")
}

model TourImage {
  id           Int       @id @default(autoincrement())
  imageUrls    String
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tourId       Int
  tourUniqueId String
  tour         Tour      @relation(fields: [tourId, tourUniqueId], references: [id, uniqueId], onDelete: Cascade)

  @@map("tour_images")
}

model TourPrice {
  id             Int       @id @default(autoincrement())
  numOfPeople    Int       @default(0)
  currency       String
  pricePerPerson Float     @default(0)
  seasonName     String?
  seasonPeriod   String?
  dateCreated    DateTime  @default(now())
  dateModified   DateTime? @updatedAt
  tourId         Int
  tourUniqueId   String
  tour           Tour      @relation(fields: [tourId, tourUniqueId], references: [id, uniqueId], onDelete: Cascade)

  @@map("tour_prices")
}

model Park {
  id           Int        @id @default(dbgenerated("'parks_id_seq'::regclass"))
  name         String     @unique
  type         String
  country      String
  countryCode  String
  keyword      String
  dateCreated  DateTime   @default(now())
  dateModified DateTime?  @updatedAt
  tourParks    TourPark[]

  @@map("parks")
}

model TourPark {
  parkId Int
  tourId Int
  park   Park @relation(fields: [parkId], references: [id], onDelete: Cascade, map: "_TourParks_A_fkey")
  tour   Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, map: "_TourParks_B_fkey")

  @@id([parkId, tourId])
  @@index([tourId], map: "_TourParks_B_index")
  @@map("_TourParks")
}

model Country {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tours        Tour[]

  @@map("countries")
}

model Operator {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  dateCreated  DateTime  @default(now())
  dateModified DateTime? @updatedAt
  tours        Tour[]

  @@map("operators")
}

model QuizResponse {
  id               Int      @id @default(autoincrement())
  userId           Int?
  sessionId        String
  quiz1Selection   String   @map("quiz_1_selection")
  quiz2Selection   String   @map("quiz_2_selection")
  quiz3Selection   String   @map("quiz_3_selection")
  quiz4Selection   String   @map("quiz_4_selection")
  createdAt        DateTime @default(now())

  @@map("quiz_responses")
}

model QuizConfig {
  id                       Int     @id @default(autoincrement())
  mandatoryCategoriesCount Int     @default(2) @map("mandatory_categories_count")
  isActive                 Boolean @default(true) @map("is_active")

  @@map("quiz_config")
}
